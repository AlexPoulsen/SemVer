import kitten.ranged;
import kitten.xs_Rounding;
import dotsep;
import identifier;
include "math.h";


struct SemVer {
    var major: Uint;
    var minor: Uint;
    var patch: Uint;
    var prerelease: CString;
    var buildmeta: CString;

    public static function new(major: Uint, minor: Uint, patch: Uint, prerelease: CString = "", buildmeta: CString = ""): SemVer {
        return struct Self {
            major,
            minor,
            patch,
            prerelease,
            buildmeta
        };
    }

    function incrMajor(prerelease: CString = "", buildmeta: CString = "") {
        this.major += 1;
        this.minor = 0;
        this.patch = 0;
        if prerelease != "" && prerelease != null {
            this.prerelease = prerelease;
        } else if prerelease == null {
        } else {
            this.prerelease = "";
        }
        if buildmeta != "" && buildmeta != null {
            this.buildmeta = buildmeta;
        } else if buildmeta == null {
        } else {
            this.buildmeta = "";
        }
    }

    function incrMinor(prerelease: CString = "", buildmeta: CString = "") {
        this.minor += 1;
        this.patch = 0;
        if prerelease != "" && prerelease != null {
            this.prerelease = prerelease;
        } else if prerelease == null {
        } else {
            this.prerelease = "";
        }
        if buildmeta != "" && buildmeta != null {
            this.buildmeta = buildmeta;
        } else if buildmeta == null {
        } else {
            this.buildmeta = "";
        }
    }

    function incrPatch(prerelease: CString = "", buildmeta: CString = "") {
        this.patch += 1;
        if prerelease != "" && prerelease != null {
            this.prerelease = prerelease;
        } else if prerelease == null {
        } else {
            this.prerelease = "";
        }
        if buildmeta != "" && buildmeta != null {
            this.buildmeta = buildmeta;
        } else if buildmeta == null {
        } else {
            this.buildmeta = "";
        }
    }

    function toString() {
        var majorSize: Int = xs_CeilToInt(log10(this.major)) + 1;  // for numbers like 1000000000, log10 will report the length as one less than it is.
        var minorSize: Int = xs_CeilToInt(log10(this.minor)) + 1;  // for numbers like 1000000000, log10 will report the length as one less than it is.
        var patchSize: Int = xs_CeilToInt(log10(this.patch)) + 1;  // for numbers like 1000000000, log10 will report the length as one less than it is.
        var size = majorSize + minorSize + patchSize + 3;
        if this.prerelease != "" {
            size += this.prerelease.length + 1;
        }
        if this.buildmeta != "" {
            size += this.buildmeta.length + 1;
        }
        var out = mallocator.calloc(size);

        var majorChars: Ptr[Char] = *(mallocator.calloc(majorSize * sizeof(Char))): Ptr[Char];
        sprintf(majorChars,"%d", this.major);
        strcpy(out, majorChars);

        strncat(out, ".", 1);

        var minorChars: Ptr[Char] = *(mallocator.calloc(minorSize * sizeof(Char))): Ptr[Char];
        sprintf(minorChars,"%d", this.minor);
        strcat(out, minorChars);

        strncat(out, ".", 1);

        var patchChars: Ptr[Char] = *(mallocator.calloc(patchSize * sizeof(Char))): Ptr[Char];
        sprintf(patchChars,"%d", this.patch);
        strcat(out, patchChars);

        if this.prerelease != "" {
            strncat(out, "-", 1);
            strcat(out, this.prerelease);
        }

        if this.buildmeta != "" {
            strncat(out, "+", 1);
            strcat(out, this.buildmeta);
        }

        strncat(out, "\x00", 1);

        return out;
    }

    function eq(other: SemVer) {
        if this.major == other.major {
            if this.minor == other.minor {
                if this.patch == other.patch {
                    if this.prerelease == "" && other.prerelease != "" {
                        return false;
                    } else if this.prerelease != "" && other.prerelease == "" {
                        return false;
                    } else if this.prerelease == "" && other.prerelease == "" {
                        return true;
                    } else if this.prerelease == other.prerelease {
                        return true;
                    } else {
                        return DotSep.newFromString(this.prerelease) == DotSep.newFromString(other.prerelease);
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    function le(other: SemVer) {
        if this.major <= other.major {
            if this.minor <= other.minor {
                if this.patch <= other.patch {
                    if this.prerelease == "" && other.prerelease != "" {
                        return false;
                    } else if this.prerelease != "" && other.prerelease == "" {
                        return false;
                    } else if this.prerelease == "" && other.prerelease == "" {
                        return true;
                    } else {
                        return DotSep.newFromString(this.prerelease) <= DotSep.newFromString(other.prerelease);
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    function ge(other: SemVer) {
        if this.major >= other.major {
            if this.minor >= other.minor {
                if this.patch >= other.patch {
                    if this.prerelease == "" && other.prerelease != "" {
                        return false;
                    } else if this.prerelease != "" && other.prerelease == "" {
                        return false;
                    } else if this.prerelease == "" && other.prerelease == "" {
                        return true;
                    } else {
                        return DotSep.newFromString(this.prerelease) >= DotSep.newFromString(other.prerelease);
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    function ne(other: SemVer) {
        if this.major != other.major {
            return true;
        } else {
            if this.minor != other.minor {
                return true;
            } else {
                if this.patch != other.patch {
                    return true;
                } else {
                    if this.prerelease == "" && other.prerelease != "" {
                        return false;
                    } else if this.prerelease != "" && other.prerelease == "" {
                        return false;
                    } else if this.prerelease == "" && other.prerelease == "" {
                        return true;
                    } else {
                        return this.prerelease != other.prerelease;
                    }
                }
            }
        }
    }

    function gt(other: SemVer) {
        if this.major < other.major {
            return false;
        } else {
            if this.minor < other.minor {
                return false;
            } else {
                if this.patch < other.patch {
                    return false;
                } else {
                    if this.prerelease == "" && other.prerelease != "" {
                        return false;
                    } else if this.prerelease != "" && other.prerelease == "" {
                        return false;
                    } else if this.prerelease == "" && other.prerelease == "" {
                        return true;
                    } else {
                        return DotSep.newFromString(this.prerelease) > DotSep.newFromString(other.prerelease);
                    }
                }
            }
        }
    }

    function lt(other: SemVer) {
        if this.major > other.major {
            return false;
        } else {
            if this.minor > other.minor {
                return false;
            } else {
                if this.patch > other.patch {
                    return false;
                } else {
                    if this.prerelease == "" && other.prerelease != "" {
                        return false;
                    } else if this.prerelease != "" && other.prerelease == "" {
                        return false;
                    } else if this.prerelease == "" && other.prerelease == "" {
                        return true;
                    } else {
                        return DotSep.newFromString(this.prerelease) < DotSep.newFromString(other.prerelease);
                    }
                }
            }
        }
    }

    rules {
        (${one: SemVer} == ${two: SemVer}) => $one.eq($two);
        (${one: SemVer} <= ${two: SemVer}) => $one.le($two);
        (${one: SemVer} >= ${two: SemVer}) => $one.ge($two);
        (${one: SemVer} != ${two: SemVer}) => $one.ne($two);
        (${one: SemVer} >  ${two: SemVer}) => $one.gt($two);
        (${one: SemVer} <  ${two: SemVer}) => $one.lt($two);
    }
}


function main() {
    var sv: SemVer = SemVer.new(1, 2, 5, "foo.12.pre-2", "buildinfo");
    var old: SemVer = SemVer.new(1, 2, 5, "foo.12.pre-1", "buildinfo");
    // var sv: SemVer = SemVer.new(1, 2, 5);
    // var old: SemVer = SemVer.new(1, 2, 4);
    printf("%s\n", sv.toString());
    printf("%s\n", old.toString());
    // sv.incrPatch();
    // printf("%s\n", sv.toString());
    // sv.incrMinor(null, "bar_bat");
    // printf("%s\n", sv.toString());
    // sv.incrPatch();
    // printf("%s\n", sv.toString());
    // sv.incrMajor();
    // printf("%s\n\n", sv.toString());
    printf("%s\n", if sv == old then "true" else "false");
    printf("%s\n", if sv <= old then "true" else "false");
    printf("%s\n", if sv >= old then "true" else "false");
    printf("%s\n", if sv != old then "true" else "false");
    printf("%s\n", if sv >  old then "true" else "false");
    printf("%s\n", if sv <  old then "true" else "false");
}
